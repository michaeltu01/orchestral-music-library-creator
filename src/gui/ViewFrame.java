/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package src.gui;

import javax.swing.*;
import java.awt.BorderLayout;
import java.awt.Window;
import java.awt.event.*;
import java.util.ArrayList;

import src.backend.Composition;
import src.backend.Library;
/**
 *
 * @author Michael Tu
 */
public class ViewFrame extends JPanel {

    private static JLabel directions;
    private JButton backButton;
    private JButton deleteButton;
    private JButton clearLibraryButton;
    private JButton editButton;
    private static JTable searchResults;
    private static JScrollPane sp;
    private static JTextField titleField;
    private JLabel titleLabel;
    private JButton helpButton;

    private static Library library;
    private static ArrayList<Composition> results;
    
    /**
     * Creates new form ViewFrame
     */
    public ViewFrame(Library l) {
        initComponents(l);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents(Library l) {

        directions = new JLabel();
        titleLabel = new JLabel();
        titleField = new JTextField();
        editButton = new JButton();
        deleteButton = new JButton();
        backButton = new JButton();
        sp = new JScrollPane();
        searchResults = new JTable();
        clearLibraryButton = new JButton();
        helpButton = new JButton();
        JPanel viewFrame = this;
        
        library = l;
        results = new ArrayList<Composition>();

        directions.setHorizontalAlignment(SwingConstants.CENTER);
        directions.setText("Search for the composition below. Number of results: ");

        titleLabel.setText("Title:");

        titleField.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                titleFieldActionPerformed(evt);
            }

            private void titleFieldActionPerformed(ActionEvent evt) 
            {
                resetResults();
                Object[][] data = new Object [results.size()][6];
                retrieveData(data);
                populateTable(data); 
            }
        });

        clearLibraryButton.setText("Clear Library");
        clearLibraryButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt)
            {
                clearLibraryButtonActionPerformed(evt);
            }

            private void clearLibraryButtonActionPerformed(ActionEvent evt)
            {
                library.clear();
                library.toString();

                JDialog dialog = new JDialog();
                JLabel confMessage = new JLabel("Library has been cleared. Confirm your save upon closing the application.");

                confMessage.setHorizontalAlignment(JLabel.CENTER);
                dialog.add(confMessage);
                dialog.setSize(500, 100);
                dialog.setLocationRelativeTo(null);
                dialog.setVisible(true);

            }
        });

        editButton.setText("Edit");
        editButton.setMnemonic(KeyEvent.VK_ENTER);
        editButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                editButtonActionPerformed(evt);
            }

            private void editButtonActionPerformed(ActionEvent evt) 
            {
                int row = searchResults.getSelectedRow();
                Composition c = results.get(row);
                int index = library.getIndex(c);

                JFrame frame = new JFrame("Edit composition");
                EditFrame ef = new EditFrame(frame, library, c, index, false);

                frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                frame.getContentPane().add(ef, BorderLayout.CENTER);
                frame.pack();
                frame.setVisible(true);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.setMnemonic(KeyEvent.VK_DELETE);
        deleteButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }

            private void deleteButtonActionPerformed(ActionEvent evt)
            {
                Object[] options = {"Yes", "No"};
                
                int result = JOptionPane.showOptionDialog(viewFrame, "Are you sure you want to delete this composition?", "Delete", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
                switch (result)
                {
                    case 0:
                        int row = searchResults.getSelectedRow();
                        Composition c = results.get(row);
                        System.out.println("Index of composition in Library: " + library.getIndex(c));
                        System.out.println("This is results before removal: " + results);
                        System.out.println("This is Library before removal: " + library);

                        results.remove(c);

                        System.out.println("This is results after removal:" + results);
                        System.out.println("This is Library after removal:" + results);

                        // library.remove(c); 

                        Object[][] data = new Object[results.size()][6];
                        populateTable(retrieveData(data));
                    case 1:
                        JOptionPane.getRootFrame().dispose(); 
                }
            }
        });

        backButton.setText("Back");
        backButton.setMnemonic(KeyEvent.VK_BACK_SPACE);
        backButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                backButtonActionPerformed(evt);
            }

            private void backButtonActionPerformed(ActionEvent evt) 
            {
                JComponent comp = (JComponent)evt.getSource();
                Window win = SwingUtilities.getWindowAncestor(comp);
                win.dispose();
            }
        });

        Icon helpIcon = new ImageIcon("helpIcon.png");
        helpButton.setIcon(helpIcon);
        helpButton.setMnemonic(KeyEvent.VK_H);
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }

            private void helpButtonActionPerformed(ActionEvent evt)
            {
                String str = "<html>Hit ENTER on an empty search bar to see your entire library.<br>"
                                + "Search a number 1-6 to see all compositions with the corresponding VBODA grade<html>";
                JOptionPane.showMessageDialog(viewFrame, str);
            }
        });

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(clearLibraryButton)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(editButton)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(backButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(sp, GroupLayout.PREFERRED_SIZE, 570, GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(87, 87, 87)
                                .addComponent(titleLabel)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(titleField, GroupLayout.PREFERRED_SIZE, 441, GroupLayout.PREFERRED_SIZE)))
                    .addGap(0, 16, Short.MAX_VALUE))
                .addGroup(layout.createSequentialGroup()
                    .addGap(148, 148, 148)
                    .addComponent(directions)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(helpButton)))
            .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(directions)
                    .addComponent(helpButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(titleLabel)
                    .addComponent(titleField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addComponent(sp, GroupLayout.PREFERRED_SIZE, 261, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(editButton)
                    .addComponent(deleteButton)
                    .addComponent(backButton)
                    .addComponent(clearLibraryButton))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public static int numSearchResults()
    {
        return results.size();
    }

    public static void resetResults()
    {
        results = pullResults();
    }

    public static ArrayList<Composition> pullResults()
    {
        ArrayList<Composition> arr = new ArrayList<Composition>();
        String input = titleField.getText();
        System.out.println(input);
        
        switch (input)
        {
            case "": // Shows all compositions in the Library
                return library.getAll();
            case "0": // Shows all compositions with no VBODA grade (i.e. VBODA Grade = 0)
                for(int i = 0; i < library.size(); i++)
                {
                    Composition c = library.getComposition(i);
                    int vbodaGrade = c.getVbodaGrade();

                    if(vbodaGrade == 0)
                    {
                        arr.add(c);
                    }
                }
                return arr;
            case "1": // Shows all compositions with VBODA grade of 1
                for(int i = 0; i < library.size(); i++)
                {
                    Composition c = library.getComposition(i);
                    int vbodaGrade = c.getVbodaGrade();

                    if(vbodaGrade == 1)
                    {
                        arr.add(c);
                    }
                }
                return arr;
            case "2": // Shows all compositions with VBODA grade of 2
                for(int i = 0; i < library.size(); i++)
                {
                    Composition c = library.getComposition(i);
                    int vbodaGrade = c.getVbodaGrade();

                    if(vbodaGrade == 2)
                    {
                        arr.add(c);
                    }
                }
                return arr;
            case "3": // Shows all compositions with VBODA grade of 3
                for(int i = 0; i < library.size(); i++)
                {
                    Composition c = library.getComposition(i);
                    int vbodaGrade = c.getVbodaGrade();

                    if(vbodaGrade == 3)
                    {
                        arr.add(c);
                    }
                }
                return arr;
            case "4": // Shows all compositions with VBODA grade of 4
                for(int i = 0; i < library.size(); i++)
                {
                    Composition c = library.getComposition(i);
                    int vbodaGrade = c.getVbodaGrade();

                    if(vbodaGrade == 4)
                    {
                        arr.add(c);
                    }
                }
                return arr;
            case "5": // Shows all compositions with VBODA grade of 5
                for(int i = 0; i < library.size(); i++)
                {
                    Composition c = library.getComposition(i);
                    int vbodaGrade = c.getVbodaGrade();

                    if(vbodaGrade == 5)
                    {
                        arr.add(c);
                    }
                }
                return arr;
            case "6": // Shows all compositions with VBODA grade of 6
                for(int i = 0; i < library.size(); i++)
                {
                    Composition c = library.getComposition(i);
                    int vbodaGrade = c.getVbodaGrade();

                    if(vbodaGrade == 6)
                    {
                        arr.add(c);
                    }
                }
                return arr;
            default: // Shows all compositions with the matching title
                for(int i = 0; i < library.size(); i++)
                {
                    Composition c = library.getComposition(i);
                    String title = c.getTitle();

                    if(input.equals(title))
                    {
                        arr.add(c);
                    }
                }
                return arr;
        }
    }

    public static void populateTable(Object[][] data)
    {
        searchResults.setModel(new javax.swing.table.DefaultTableModel(data,
                new String [] {"Title", "Composer", "Arranger", "Publisher", "VBODA Grade", "Notes"}) {
                Class[] types = new Class [] {
                    java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
                };
                boolean[] canEdit = new boolean [] {
                    false, false, false, false, false, false
                };
    
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
    
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
                });
                sp.setViewportView(searchResults);
        directions.setHorizontalAlignment(SwingConstants.CENTER);
        directions.setText("Search for the composition below. Number of results: " + numSearchResults());
    }

    public static Object[][] retrieveData(Object[][] data)
    {
        for(int i = 0; i < results.size(); i++)
        {
            ArrayList<String> arr = results.get(i).toStringArrayList();
            for(int j = 0; j < 6; j++)
            {
                data[i][j] = arr.get(j);
            }
        }

        return data;
    }
}
