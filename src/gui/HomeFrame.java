/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package src.gui;

import src.backend.Library;

import java.awt.BorderLayout;
import java.awt.event.*;
import java.io.File;

import javax.swing.*;
/**
 *
 * @author Michael Tu
 */
public class HomeFrame extends JPanel {

    private JButton addButton;
    private JButton autocompleteButton;
    private JButton importButton;
    private JButton viewButton;
    private JLabel welcomeMessage;
    private JButton helpButton;

    private static final Library LIBRARY = new Library(new File("Database.xlsx"));;

    /**
     * Creates new form HomeFrame
     */
    public HomeFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        welcomeMessage = new JLabel();
        importButton = new JButton();
        addButton = new JButton();
        viewButton = new JButton();
        autocompleteButton = new JButton();
        helpButton = new JButton();
        JPanel homeFrame = this;

        welcomeMessage.setHorizontalAlignment(SwingConstants.CENTER);
        welcomeMessage.setText("<html><center>Welcome Mr. Kelly to the Orchestra Music Library Creator!<br>Select a button below to get started.<center><html>");
        welcomeMessage.setHorizontalTextPosition(SwingConstants.CENTER);

        importButton.setText("Import Library");
        importButton.setMnemonic(KeyEvent.VK_1);
        importButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                importButtonActionPerformed(evt);
            }

            private void importButtonActionPerformed(ActionEvent evt) 
            {
                ImportFrame impF = new ImportFrame(LIBRARY);
                impF.setVisible(true);
            }
        });

        addButton.setText("Add music");
        addButton.setMnemonic(KeyEvent.VK_2);
        addButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                addButtonActionPerformed(evt);
            }

            private void addButtonActionPerformed(ActionEvent evt) 
            {
                EditFrame ef = new EditFrame(LIBRARY);
                JFrame frame = new JFrame("Add Composition");
        
                frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                frame.getContentPane().add(ef, BorderLayout.CENTER);
                frame.pack();
                frame.setLocationRelativeTo(null);
                frame.setVisible(true);
            }
        });

        autocompleteButton.setText("Input using title");
        autocompleteButton.setMnemonic(KeyEvent.VK_3);
        autocompleteButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                autocompleteButtonActionPerformed(evt);
            }

            private void autocompleteButtonActionPerformed(ActionEvent evt) 
            {
                AutocompleteFrame af = new AutocompleteFrame(LIBRARY);
                JFrame frame = new JFrame("View LIBRARY");
        
                frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                frame.getContentPane().add(af, BorderLayout.CENTER);
                frame.pack();
                frame.setLocationRelativeTo(null);
                frame.setVisible(true);
            }
        });

        viewButton.setText("View Library");
        viewButton.setMnemonic(KeyEvent.VK_4);
        viewButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }

            private void viewButtonActionPerformed(ActionEvent evt) 
            {
                ViewFrame vf = new ViewFrame(LIBRARY);
                JFrame frame = new JFrame("View Library");
        
                frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                frame.getContentPane().add(vf, BorderLayout.CENTER);
                frame.pack();
                frame.setLocationRelativeTo(null);
                frame.setVisible(true);
            }
        });

        Icon helpIcon = new ImageIcon("helpIcon.png");
        helpButton.setIcon(helpIcon);
        helpButton.setMnemonic(KeyEvent.VK_H);
        helpButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }

            private void helpButtonActionPerformed(ActionEvent evt) 
            {
                String str = "<html>\"Import library\": Overwrites the current library with an existing Excel file <br>"
                                + "\"Add music\": Adds a new composition<br>"
                                + "\"Input using title\": Searches the VBODA Database for a composition<br>"
                                + "\"View library\": View, edit, and delete compositions<html>";

                JOptionPane.showMessageDialog(homeFrame, str);
            }
        });

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(welcomeMessage)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(helpButton, GroupLayout.PREFERRED_SIZE, 24, GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(importButton, GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(addButton, GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(autocompleteButton, GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(viewButton, GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)))
                    .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(welcomeMessage, GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                        .addGap(40, 40, 40))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(helpButton, GroupLayout.PREFERRED_SIZE, 25, GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)))
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(importButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(viewButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(autocompleteButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    public static void main(String[] args)
    {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() 
            {
                JFrame frame = new JFrame("HomeFrame");

                frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                frame.getContentPane().add(new HomeFrame(), BorderLayout.CENTER);
                frame.pack();
                frame.setVisible(true);
                frame.addWindowListener(new WindowAdapter(){

                    @Override
                    public void windowClosing(WindowEvent e) 
                    {
                        Object[] options = {"Save", "Don't Save"};
                        int result = JOptionPane.showOptionDialog(frame, "Do you want to save?", "Save", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
                        switch (result)
                        {
                            case 0:
                                SavePrompt sp = new SavePrompt(LIBRARY);
                                sp.setVisible(true);
                            case 1:
                                frame.dispose(); 
                        }
                    }});
            }
        });
    }
}
